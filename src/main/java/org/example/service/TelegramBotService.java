package org.example.service;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.example.entity.Movie;
import org.example.entity.UserMovieRating;
import org.example.entity.Usr;
import org.example.repository.MovieRepository;
import org.example.repository.UserMovieRatingRepository;
import org.example.repository.UsrRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;

@Service
@RequiredArgsConstructor
public class TelegramBotService extends TelegramLongPollingBot {

    private final Map<String, Movie> activeRatings = new ConcurrentHashMap<>();
    private final Map<String, String> waitingForInput = new ConcurrentHashMap<>();
    private final UserMovieRatingRepository userMovieRatingRepository;
    private final CommandProcessingService commandProcessingService;
    private final UsrRepository usrRepository;
    private final MovieRepository movieRepository;
    private final TmdbService tmdbService;

    @Value("${spring.telegram.bot.username}")
    private String botUsername;

    @Value("${spring.telegram.bot.token}")
    private String botToken;

    private final Map<String, Consumer<Update>> commandHandlers = new HashMap<>();

    @PostConstruct
    public void init() {
        System.out.println("Username: " + botUsername);
        System.out.println("Token: " + botToken);

        commandHandlers.put("üîç –ü–æ–∏—Å–∫", this::handleSearchCommand);
        commandHandlers.put("üåÄ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", this::handleRateAllCommand);
        commandHandlers.put("üé¨ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã", this::handleRatePopularCommand);
        commandHandlers.put("üèÜ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", this::handleMostPersonalCommand);
        commandHandlers.put("‚ù§Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", this::handlePersonalCommand);
        commandHandlers.put("üìú –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏", this::handleAllRatedCommand);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String userMessage = update.getMessage().getText();

            usrRepository.findByChatId(chatId).ifPresentOrElse(
                    usr -> System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + usr.getUsername()),
                    () -> registerNewUser(update)
            );

            if (waitingForInput.containsKey(chatId.toString())) {
                String pendingCommand = waitingForInput.remove(chatId.toString());
                if (pendingCommand.equals("search")) {
                    processSearchQuery(update);
                }
                return;
            }

            if (activeRatings.containsKey(chatId.toString())) {
                handleRatingResponse(update);
                return;
            }

            commandHandlers.getOrDefault(userMessage, this::handleUnknownCommand).accept(update);
        }
    }

    private void handleSearchCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();

        ReplyKeyboardRemove removeKeyboard = new ReplyKeyboardRemove();
        removeKeyboard.setRemoveKeyboard(true);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("""
                üîç *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.*""");
        message.setReplyMarkup(removeKeyboard);

        message.setParseMode("Markdown");
        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
        waitingForInput.put(chatId, "search");
    }

    private void processSearchQuery(Update update) {
        String messageText = update.getMessage().getText();
        String chatId = update.getMessage().getChatId().toString();
        if (messageText == null || messageText.trim().isEmpty()) {
            sendResponse(chatId, """
                    ‚ö†Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.*
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.""");
            waitingForInput.put(chatId, "search");
            return;
        }

        String result = commandProcessingService.searchMovie(update);
        if (result.isEmpty()) {
            sendResponse(chatId, """
                    üòî *–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.""");
        } else {
            sendSplitResponse(chatId, String.format("""
                    üé¨ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*
                    
                    %s""", result));
        }
        handleUnknownCommand(update);
    }

    private void handleRatePopularCommand(Update update) {
        Long chatId = update.getMessage().getChatId();

        Usr user = usrRepository.findByChatId(chatId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));
        Map<String, Object> randomMovieData = tmdbService.getRandomPopularMovie();
        Movie randomMovie = commandProcessingService.saveOrUpdateMovie(randomMovieData);
        double similarity = commandProcessingService.computeCosineSimilarity(commandProcessingService.getUserGenres(user),
                commandProcessingService.createGenreVector(randomMovie.getGenreIds()));

        activeRatings.put(chatId.toString(), randomMovie);

        String response = String.format(
                """
                        %s
                        ü§ù *–°—Ö–æ–¥—Å—Ç–≤–æ:* %s
                        
                        """,
                commandProcessingService.movieToString(randomMovie),
                similarity != 0 ? String.valueOf((100 + similarity * 100) / 2).substring(0, 4) + "%" : "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
        );

        SendMessage message = new SendMessage();
        message.setChatId(update.getMessage().getChatId().toString());
        message.setText("""
                ‚ùì *–•–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å–º?*""");
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–î–∞"));
        row1.add(new KeyboardButton("–ù–µ—Ç"));

        keyboardRows.add(row1);
        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        sendSplitResponse(chatId.toString(), response);
        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handlePersonalCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String result = commandProcessingService.getPersonalRecommendation(chatId);

        sendSplitResponse(chatId, String.format("""
                ‚ù§Ô∏è *–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:
                
                %s""",result));
    }

    private void handleAllRatedCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();

        try {
            String ratedMovies = commandProcessingService.getAllRatedMovies(chatId);

            sendSplitResponse(chatId, String.format("""
                    üìã *–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤:*
                    
                    %s""", ratedMovies));
        } catch (Exception e) {
            sendResponse(chatId, """
                    ‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.*
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.""");
            e.printStackTrace();
        }
    }

    private void handleMostPersonalCommand(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String result = commandProcessingService.getMostPersonalRecommendation(chatId);
        sendSplitResponse(chatId, result);
    }

    private void saveUserRating(String chatId, int rating) {
        Long userChatId = Long.parseLong(chatId);
        Usr user = usrRepository.findByChatId(userChatId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));
        Movie movie = activeRatings.get(chatId);

        if (movie == null) {
            sendResponse(chatId, """
                    ‚ö†Ô∏è *–§–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:
                    üé¨ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã*
                    üåÄ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º*""");
            return;
        }

        Optional<UserMovieRating> existingRating = userMovieRatingRepository.findByUserIdAndMovieId(user.getId(), movie.getId());

        if (existingRating.isPresent()) {
            UserMovieRating userMovieRating = existingRating.get();
            userMovieRating.setRating(rating);
            userMovieRatingRepository.save(userMovieRating);
            sendResponse(chatId, String.format("""
                    ‚úÖ *–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*
                    –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ %s –±–∞–ª–ª–æ–≤. üéâ""", rating));
        } else {
            UserMovieRating userMovieRating = new UserMovieRating();
            userMovieRating.setUser(user);
            userMovieRating.setMovie(movie);
            userMovieRating.setRating(rating);
            userMovieRatingRepository.save(userMovieRating);
            sendResponse(chatId, String.format("""
                    ‚≠ê *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!*
                    –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ %s –±–∞–ª–ª–æ–≤. üòä""", rating));
        }

        Map<String, Double> genrePreferences = commandProcessingService.getUserGenres(user);
        user.setGenrePreferences(CommandProcessingService.mapToJson(genrePreferences));
        usrRepository.save(user);

        activeRatings.remove(chatId);
    }

    private void handleRatingResponse(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String userResponse = update.getMessage().getText().toLowerCase();

        Movie movie = activeRatings.get(chatId);
        if (movie == null) {
            sendResponse(chatId, """
                    üòï *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.*
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:
                    üé¨ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã*
                    üåÄ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º*""");
            return;
        }

        if (userResponse.equals("–¥–∞")) {
            movieRepository.save(movie);

            sendResponse(chatId, """
                    üé¨ –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10? ‚≠ê""");

            SendMessage message = new SendMessage();
            message.setChatId(update.getMessage().getChatId().toString());
            message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:");
            message.setParseMode("Markdown");

            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            keyboardMarkup.setResizeKeyboard(true);

            List<KeyboardRow> keyboardRows = new ArrayList<>();

            KeyboardRow row1 = new KeyboardRow();
            row1.add(new KeyboardButton("1"));
            row1.add(new KeyboardButton("2"));
            row1.add(new KeyboardButton("3"));
            row1.add(new KeyboardButton("4"));
            row1.add(new KeyboardButton("5"));

            KeyboardRow row2 = new KeyboardRow();
            row2.add(new KeyboardButton("6"));
            row2.add(new KeyboardButton("7"));
            row2.add(new KeyboardButton("8"));
            row2.add(new KeyboardButton("9"));
            row2.add(new KeyboardButton("10"));

            keyboardRows.add(row1);
            keyboardRows.add(row2);

            keyboardMarkup.setKeyboard(keyboardRows);

            message.setReplyMarkup(keyboardMarkup);

            try {
                execute(message);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (userResponse.equals("–Ω–µ—Ç")) {
            sendResponse(chatId, """
                    üôÖ‚Äç‚ôÇÔ∏è *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!*
                    –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º. üé≤""");
            handleUnknownCommand(update);
            activeRatings.remove(chatId);
        } else {
            try {
                int rating = Integer.parseInt(userResponse);
                if (rating >= 1 && rating <= 10) {
                    saveUserRating(chatId, rating);
                    sendResponse(chatId, """
                            üéâ *–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?*""");

                    handleUnknownCommand(update);
                } else {
                    sendResponse(chatId, """
                            ‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. ‚≠ê""");
                }
            } catch (NumberFormatException e) {
                sendResponse(chatId, """
                        ‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.* üßê""");
            }
        }
    }

    private void handleRateAllCommand(Update update) {
        Long chatId = update.getMessage().getChatId();

        Usr user = usrRepository.findByChatId(chatId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));

        try {
            Movie randomMovie = commandProcessingService.getRandomMovieForRating();
            double similarity = commandProcessingService.computeCosineSimilarity(commandProcessingService.getUserGenres(user),
                    commandProcessingService.createGenreVector(randomMovie.getGenreIds()));
            activeRatings.put(chatId.toString(), randomMovie);

            String response = String.format(
                    """
                            üé≤ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏:*
                            %s
                            ü§ù *–°—Ö–æ–¥—Å—Ç–≤–æ:* %s
                            
                            """,
                    commandProcessingService.movieToString(randomMovie),
                    similarity != 0 ? String.valueOf((100 + similarity * 100) / 2).substring(0, 4) + "%": "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
            );

            SendMessage message = new SendMessage();
            message.setChatId(update.getMessage().getChatId().toString());
            message.setText("""
                    ‚ùì *–•–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å–º?*""");
            message.setParseMode("Markdown");

            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            keyboardMarkup.setResizeKeyboard(true);

            List<KeyboardRow> keyboardRows = new ArrayList<>();

            KeyboardRow row1 = new KeyboardRow();
            row1.add(new KeyboardButton("–î–∞"));
            row1.add(new KeyboardButton("–ù–µ—Ç"));

            keyboardRows.add(row1);

            keyboardMarkup.setKeyboard(keyboardRows);

            message.setReplyMarkup(keyboardMarkup);

            sendSplitResponse(chatId.toString(), response);
            try {
                execute(message);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            sendResponse(chatId.toString(), """
                    üòû *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!""");
            e.printStackTrace();
        }
    }

    private String truncateDescription(String description) {
        int maxLength = 500;
        if (description != null && description.length() > maxLength) {
            return description.substring(0, maxLength) + "...";
        }
        return description != null ? description : "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
    }

    private void handleUnknownCommand(Update update) {
        SendMessage message = new SendMessage();
        message.setChatId(update.getMessage().getChatId().toString());
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üìú –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏"));
        row2.add(new KeyboardButton("‚ù§Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîç –ü–æ–∏—Å–∫"));
        row3.add(new KeyboardButton("üèÜ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"));

        KeyboardRow row4 = new KeyboardRow();
        row4.add(new KeyboardButton("üåÄ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"));

        KeyboardRow row5 = new KeyboardRow();
        row5.add(new KeyboardButton("üé¨ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã"));

        keyboardRows.add(row2);
        keyboardRows.add(row3);
        keyboardRows.add(row4);
        keyboardRows.add(row5);

        keyboardMarkup.setKeyboard(keyboardRows);

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendSplitResponse(String chatId, String text) {
        int maxMessageLength = 4096;
        for (int i = 0; i < text.length(); i += maxMessageLength) {
            String part = text.substring(i, Math.min(text.length(), i + maxMessageLength));
            sendResponse(chatId, part);
        }
    }

    private void sendResponse(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        message.setParseMode("Markdown");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void registerNewUser(Update update) {
        if (update.hasMessage() && update.getMessage().getFrom() != null) {
            Long chatId = update.getMessage().getChatId();
            org.telegram.telegrambots.meta.api.objects.User fromUser = update.getMessage().getFrom();

            Usr newUser = new Usr();
            newUser.setChatId(chatId);
            newUser.setUsername(fromUser.getUserName());
            newUser.setFirstName(fromUser.getFirstName());
            newUser.setLastName(fromUser.getLastName());
            newUser.setLanguageCode(fromUser.getLanguageCode());
            newUser.setIsPremium(fromUser.getIsPremium());
            newUser.setIsBot(fromUser.getIsBot());

            usrRepository.save(newUser);

            sendResponse(chatId.toString(), String.format("""
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *%s*! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.""", newUser.getFirstName()));
        }
    }
}