package org.example.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.example.entity.Movie;
import org.example.entity.UserMovieRating;
import org.example.entity.Usr;
import org.example.repository.MovieRepository;
import org.example.repository.UserMovieRatingRepository;
import org.example.repository.UsrRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional
public class CommandProcessingService {
    private final TmdbService tmdbService;
    private final MovieRepository movieRepository;
    private final UsrRepository usrRepository;
    private final UserMovieRatingRepository userMovieRatingRepository;

    private static final Logger logger = LoggerFactory.getLogger(CommandProcessingService.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public String searchMovie(Update update) {
        Long chatId = update.getMessage().getChatId();
        String messageText = update.getMessage().getText().trim();
        Map<String, Object> response = tmdbService.searchMovie(messageText);
        Usr user = usrRepository.findByChatId(chatId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));

        if (response != null && response.containsKey("results")) {
            List<Map<String, Object>> movies = (List<Map<String, Object>>) response.get("results");

            movies.sort((movie1, movie2) -> {
                Double rating1 = parseRating(movie1.get("vote_average"));
                Double rating2 = parseRating(movie2.get("vote_average"));
                return rating2.compareTo(rating1);
            });

            StringBuilder result = new StringBuilder();
            for (int i = 0; i < Math.min(5, movies.size()); i++) {
                Map<String, Object> movieData = movies.get(i);
                try {
                    Movie movie = saveOrUpdateMovie(movieData);
                    double similarity = computeCosineSimilarity(getUserGenres(user), createGenreVector(movie.getGenreIds()));
                    result.append(String.format("""
                            %s
                            ü§ù *–°—Ö–æ–¥—Å—Ç–≤–æ:* %s
                            
                            """,
                            movieToString(movie),
                            similarity != 0 ? String.valueOf((100 + similarity * 100) / 2).substring(0, 4) + "%": "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ")

                    );
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞: {}", movieData, e);
                }
            }

            return result.toString().trim();
        }

        return "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }

    public String movieToString(Movie movie) {
        return String.format(
                """
                        üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s
                        üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s
                        üé≠ *–ñ–∞–Ω—Ä—ã:* %s
                        üìú *–†–µ–ª–∏–∑:* %s
                        ‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* %s""",
                movie.getTitle(),
                truncateDescription(movie.getDescription()),
                tmdbService.getGenreNames(movie.getGenreIds()),
                movie.getReleaseDate(),
                movie.getRating() != null ? movie.getRating().toString() : "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
        );
    }

    public static Double parseRating(Object ratingObj) {
        if (ratingObj == null) {
            return 0.0;
        }
        try {
            return Double.parseDouble(ratingObj.toString());
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }

    public String getPersonalRecommendation(String chatId) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);

        Usr user = usrRepository.findByChatId(Long.parseLong(chatId))
                .orElseThrow(() -> {
                    logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–µ –Ω–∞–π–¥–µ–Ω!", chatId);
                    return new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {} ({} {})", user.getUsername(), user.getFirstName(), user.getLastName());

        Map<String, Double> userGenres = getUserGenres(user);
        if (userGenres.isEmpty()) {
            logger.warn("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤.", chatId);
            return """
                    ü§∑‚Äç‚ôÇÔ∏è *–£ –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.*
                    
                    üé¨ *–û—Ü–µ–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã*:
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:
                    üé¨ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã*
                    üåÄ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º*""";
        }

        List<Movie> movies = movieRepository.findRandomMovies(30);

        if (movies.isEmpty()) {
            logger.warn("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
            return """
                    üòû *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!""";
        }

        logger.info("–û—Ç–æ–±—Ä–∞–Ω–æ {} —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", movies.size());

        Map<Movie, Double> similarityMap = new HashMap<>();
        for (Movie movie : movies) {
            Map<String, Integer> movieVector = createGenreVector(movie.getGenreIds());
            double similarity = computeCosineSimilarity(userGenres, movieVector);

            if (similarity > 0) {
                similarityMap.put(movie, similarity);
            }

            logger.debug("–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{}' (id: {}): {}", movie.getTitle(), movie.getMovieId(), similarity);
        }

        List<Map.Entry<Movie, Double>> sortedMovies = similarityMap.entrySet()
                .stream()
                .sorted((e1, e2) -> Double.compare(e2.getValue(), e1.getValue()))
                .limit(5)
                .toList();

        if (sortedMovies.isEmpty()) {
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            return """
                    ü§∑‚Äç‚ôÇÔ∏è *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –≤–∞—Å.*
                    üé¨ *–û—Ü–µ–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.*
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:
                    üé¨ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã*
                    üåÄ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º*""";
        }

        StringBuilder response = new StringBuilder();
        for (Map.Entry<Movie, Double> entry : sortedMovies) {
            Movie movie = entry.getKey();
            double similarity = entry.getValue();
            response.append(String.format(
                    """
                            %s
                            ü§ù *–°—Ö–æ–¥—Å—Ç–≤–æ:* %s
                            
                            """,
                    movieToString(movie),
                    similarity != 0 ? String.valueOf((100 + similarity * 100) / 2).substring(0, 4) + "%" : "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
            ));
        }

        logger.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);
        return response.toString().trim();
    }

    private String truncateDescription(String description) {
        int maxLength = 2000;
        if (description != null && description.length() > maxLength) {
            return description.substring(0, maxLength) + "...";
        }
        return description != null ? description : "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
    }

    public Map<String, Double> getUserGenres(Usr user) {
        List<UserMovieRating> ratings = userMovieRatingRepository.findByUserId(user.getId());
        Map<String, Double> genreWeights = new HashMap<>();

        for (UserMovieRating rating : ratings) {
            int userRating = rating.getRating();
            String[] genres = rating.getMovie().getGenreIds().split("_");

            for (String genre : genres) {
                genreWeights.put(genre, genreWeights.getOrDefault(genre, 0.0) + (userRating - 5));
            }
        }
        return genreWeights;
    }

    public static String mapToJson(Map<String, Double> map) {
        try {
            return objectMapper.writeValueAsString(map);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    public static Map<String, Double> jsonToMap(String json) {
        try {
            return objectMapper.readValue(json, new TypeReference<Map<String, Double>>() {});
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    public Map<String, Integer> createGenreVector(String genreIds) {
        Map<String, Integer> vector = new HashMap<>();
        for (String genreId : genreIds.split("_")) {
            vector.put(genreId, vector.getOrDefault(genreId, 0) + 1);
        }
        logger.debug("–°–æ–∑–¥–∞–Ω –≤–µ–∫—Ç–æ—Ä –∂–∞–Ω—Ä–æ–≤: {}", vector);
        return vector;
    }

    public double computeCosineSimilarity(Map<String, Double> vectorA, Map<String, Integer> vectorB) {
        Set<String> allKeys = new HashSet<>();
        allKeys.addAll(vectorA.keySet());
        allKeys.addAll(vectorB.keySet());

        double dotProduct = 0.0;
        double normA = 0.0;
        double normB = 0.0;

        for (String key : allKeys) {
            double valueA = vectorA.getOrDefault(key, 0.0);
            double valueB = vectorB.getOrDefault(key, 0);

            dotProduct += valueA * valueB;
            normA += Math.pow(valueA, 2);
            normB += Math.pow(valueB, 2);

            logger.debug("–ñ–∞–Ω—Ä: {}, –ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ A: {}, –ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ B: {}, –¢–µ–∫—É—â–∏–π dotProduct: {}", key, valueA, valueB, dotProduct);
        }

        logger.debug("–ù–æ—Ä–º–∞ A: {}, –ù–æ—Ä–º–∞ B: {}, –ò—Ç–æ–≥–æ–≤—ã–π dotProduct: {}", Math.sqrt(normA), Math.sqrt(normB), dotProduct);

        if (normA == 0 || normB == 0) {
            logger.warn("–û–¥–∏–Ω –∏–∑ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç. –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 0.");
            return 0.0;
        }

        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }

    public Movie getRandomMovieForRating() {
        Map<String, Object> randomMovie = tmdbService.getRandomMovieFromAll();

        if (randomMovie != null) {
            Long movieId = Long.valueOf(randomMovie.getOrDefault("id", 0).toString());
            return movieRepository.findByMovieId(movieId).orElseGet(() -> {
                Movie newMovie = new Movie();
                newMovie.setMovieId(movieId);
                newMovie.setReleaseDate((String) randomMovie.getOrDefault("release_date", "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"));
                newMovie.setTitle((String) randomMovie.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"));
                newMovie.setRating(parseRating(randomMovie.get("vote_average")));
                newMovie.setDescription((String) randomMovie.getOrDefault("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"));

                StringBuilder stringBuilder = new StringBuilder();
                ((List<Integer>) randomMovie.getOrDefault("genre_ids", Collections.emptyList()))
                        .forEach(genreId -> stringBuilder.append(genreId).append("_"));
                if (stringBuilder.length() > 0) {
                    stringBuilder.deleteCharAt(stringBuilder.length() - 1);
                }
                newMovie.setGenreIds(stringBuilder.toString());

                movieRepository.save(newMovie);
                return newMovie;
            });
        }

        throw new IllegalArgumentException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ –±–∞–∑—ã TMDb.");
    }

    public String getAllRatedMovies(String chatId) {
        Long userChatId = Long.parseLong(chatId);

        Usr user = usrRepository.findByChatId(userChatId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));

        List<UserMovieRating> ratings = userMovieRatingRepository.findByUserId(user.getId())
                .stream()
                .sorted((r1, r2) -> Long.compare(r2.getId(), r1.getId()))
                .toList();

        if (ratings.isEmpty()) {
            return """
                    üìù *–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.*
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:
                    üé¨ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã*
                    üåÄ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º*""";
        }

        return ratings.stream()
                .map(rating -> String.format(
                        """
                                üé¨ *–ù–∞–∑–≤–∞–Ω–∏–µ*: %s
                                ‚≠ê *–û—Ü–µ–Ω–∫–∞*: %d
                                üé≠ *–ñ–∞–Ω—Ä—ã*: %s
                                """,
                        rating.getMovie().getTitle(),
                        rating.getRating(),
                        tmdbService.getGenreNames(rating.getMovie().getGenreIds())
                ))
                .collect(Collectors.joining("\n---\n"));
    }

    public Movie saveOrUpdateMovie(Map<String, Object> movieData) {
        Long movieId = Long.valueOf(movieData.getOrDefault("id", 0).toString());
        Optional<Movie> existingMovie = movieRepository.findByMovieId(movieId);

        if (existingMovie.isEmpty()) {
            Movie newMovie = mapToMovie(movieData);

            return movieRepository.save(newMovie);
        }
        return existingMovie.get();
    }

    public String getMostPersonalRecommendation(String chatId) {
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: {}", chatId);

        Usr user = usrRepository.findByChatId(Long.parseLong(chatId))
                .orElseThrow(() -> {
                    logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–µ –Ω–∞–π–¥–µ–Ω!", chatId);
                    return new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {} ({} {})", user.getUsername(), user.getFirstName(), user.getLastName());

        Map<String, Double> userGenres = getUserGenres(user);
        if (userGenres.isEmpty()) {
            logger.warn("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤.", chatId);
            return """
                    ü§∑‚Äç‚ôÇÔ∏è *–£ –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.*
                    
                    üé¨ *–û—Ü–µ–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤*:
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:
                    üé¨ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã*
                    üåÄ *–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º*""";
        }

        List<Movie> allMovies = movieRepository.findAll();
        if (allMovies.isEmpty()) {
            logger.warn("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
            return """
                    üòû *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.*
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!""";
        }

        Movie bestMatch = null;
        double maxSimilarity = -1;

        for (Movie movie : allMovies) {
            Map<String, Integer> movieVector = createGenreVector(movie.getGenreIds());
            double similarity = computeCosineSimilarity(userGenres, movieVector);

            logger.debug("–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{}' (id: {}): {}", movie.getTitle(), movie.getMovieId(), similarity);

            if (similarity > maxSimilarity) {
                maxSimilarity = similarity;
                bestMatch = movie;
            }
        }

        if (bestMatch == null) {
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            return """
                    ü§∑‚Äç‚ôÇÔ∏è *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è –≤–∞—Å.*""";
        }

        logger.info("–õ—É—á—à–∏–π —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (id: {}). –°—Ö–æ–¥—Å—Ç–≤–æ: {}", bestMatch.getTitle(), bestMatch.getMovieId(), maxSimilarity);

        return String.format(
                """
                        %s
                        ü§ù *–°—Ö–æ–¥—Å—Ç–≤–æ:* %s""",
                movieToString(bestMatch),
                maxSimilarity != 0 ? String.valueOf((100 + maxSimilarity * 100) / 2).substring(0, 4) + "%" : "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
        );
    }

    public static Movie mapToMovie(Map<String, Object> movieData) {
        Long movieId = Long.valueOf(movieData.getOrDefault("id", 0).toString());

        Movie newMovie = new Movie();
        newMovie.setMovieId(movieId);
        newMovie.setTitle((String) movieData.getOrDefault("title", "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"));
        newMovie.setReleaseDate(((String) movieData.getOrDefault("release_date", "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ")).replace("-", "."));
        newMovie.setDescription((String) movieData.getOrDefault("overview", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"));
        newMovie.setRating(parseRating(movieData.get("vote_average")));

        StringBuilder genreBuilder = new StringBuilder();
        ((List<Integer>) movieData.getOrDefault("genre_ids", Collections.emptyList()))
                .forEach(genreId -> genreBuilder.append(genreId).append("_"));
        if (genreBuilder.length() > 0) {
            genreBuilder.deleteCharAt(genreBuilder.length() - 1);
        }
        newMovie.setGenreIds(genreBuilder.toString());

        return newMovie;
    }

    @Scheduled(cron = "0 0 0 * * *")
    public void cachePopularMovies() {
        for (int i = 1; i <= 30; i++) {
            Map<String, Object> response = tmdbService.fetchMoviesFromAllPages(i);

            if (response != null && response.containsKey("results")) {
                ((List<Map<String, Object>>) response.get("results")).forEach(this::saveOrUpdateMovie);
            }
        }
    }
}
